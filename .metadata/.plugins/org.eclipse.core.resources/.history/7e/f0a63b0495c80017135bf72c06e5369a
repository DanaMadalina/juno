;(printout t "Hello world" crlf)
;comentariu
/*COMENTARIU*/
/*
(bind ?a (read));citire de la tastatura
(bind ?b (read))
(if(> ?a ?b) then (printout t ?a crlf)
    else(printout t ?b crlf))
*/
(deftemplate Persoana (multislot nume)(multislot mama)(multislot tata)(multislot casatorit))
;(assert (Persoana(nume Ionela Ionescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit George Ionescu)))
(assert (Persoana(nume Ion Popescu)(mama nil)(tata nil)(casatorit Maria Popescu)))
(assert (Persoana(nume Maria Popescu)(mama nil)(tata nil)(casatorit Ion Popescu)))
(assert (Persoana(nume Cristian Popescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Elena Popescu)))
(assert (Persoana(nume Elena Popescu)(mama nil)(tata nil)(casatorit Cristian Popescu)))
(assert (Persoana(nume Adrian Popescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Cristina Popescu)))
(assert (Persoana(nume Cristina Popescu)(mama nil)(tata nil)(casatorit Adrian Popescu)))
(assert (Persoana(nume Tudor Popescu)(mama Cristina Popescu)(tata Adrian Popescu)(casatorit nil)))
(assert (Persoana(nume Ciprian Popescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Adriana Popescu)))
(assert (Persoana(nume Adriana Popescu)(mama nil)(tata nil)(casatorit Ciprian Popescu)))
(assert (Persoana(nume Maria Andreescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Petre Andreescu)))
(assert (Persoana(nume Petre Andreescu)(mama nil)(tata nil)(casatorit Maria Andreescu)))
(assert (Persoana(nume Ionel Andreescu)(mama Maria Andreescu)(tata Petre Andreescu)(casatorit nil)))


/*(deffacts Familie
    (Persoana(nume Ion Popescu)(mama nil)(tata nil)(casatorit Maria Popescu))
    (Persoana(nume Maria Popescu)(mama nil)(tata nil)(casatorit Ion Popescu))
    (Persoana(nume Cristian Popescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Elena Popescu))
    (Persoana(nume Elena Popescu)(mama nil)(tata nil)(casatorit Cristian Popescu))
    (Persoana(nume Adrian Popescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Cristina Popescu))
    (Persoana(nume Cristina Popescu)(mama nil)(tata nil)(casatorit Adrian Popescu))
    (Persoana(nume Tudor Popescu)(mama Cristina Popescu)(tata Adrian Popescu)(casatorit nil))
    (Persoana(nume Ciprian Popescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Adriana Popescu))
    (Persoana(nume Adriana Popescu)(mama nil)(tata nil)(casatorit Ciprian Popescu))
    (Persoana(nume Maria Andreescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Petre Andreescu))
    (Persoana(nume Petre Andreescu)(mama nil)(tata nil)(casatorit Maria Andreescu))
    (Persoana(nume Ionel Andreescu)(mama Maria Andreescu)(tata Petre Andreescu)(casatorit nil))
    )(reset)
*/
(facts)

(defrule regula2
    (Persoana(nume $?x)(mama Maria Popescu))
    =>
    (printout t "Maria Popescu este mama: " $?x crlf))
(facts)
(run)

(deftemplate Persoane (slot nume)(slot prenume)(multislot mama)(multislot tata)(multislot casatorit))
(assert (Persoane(nume Ion)(prenume Ion)(mama nil)(tata nil)(casatorit Maria Popescu)))
(assert (Persoane(nume Popescu)(prenume Maria)(mama nil)(tata nil)(casatorit Ion Popescu)))
(assert (Persoane(nume  Popescu)(prenume Cristian)(mama Maria Popescu)(tata Ion Popescu)(casatorit Elena Popescu)))
(assert (Persoane(nume  Popescu)(prenume Elena)(mama nil)(tata nil)(casatorit Cristian Popescu)))
(assert (Persoane(nume  Popescu)(prenume Adrian)(mama Maria Popescu)(tata Ion Popescu)(casatorit Cristina Popescu)))
(assert (Persoane(nume  Popescu)(prenume Cristina)(mama nil)(tata nil)(casatorit Adrian Popescu)))
(assert (Persoane(nume  Popescu)(prenume Tudor)(mama Cristina Popescu)(tata Adrian Popescu)(casatorit nil)))
(assert (Persoane(nume  Popescu)(prenume Ciprian)(mama Maria Popescu)(tata Ion Popescu)(casatorit Adriana Popescu)))
(assert (Persoane(nume  Popescu)(prenume Adriana)(mama nil)(tata nil)(casatorit Ciprian Popescu)))
(assert (Persoane(nume  Andreescu)(prenume Maria)(mama Maria Popescu)(tata Ion Popescu)(casatorit Petre Andreescu)))
(assert (Persoane(nume  Andreescu)(prenume Petre)(mama nil)(tata nil)(casatorit Maria Andreescu)))
(assert (Persoane(nume  Andreescu)(prenume Ionel)(mama Maria Andreescu)(tata Petre Andreescu)(casatorit nil)))

(facts)

(defrule regula3
    (Persoane(nume $?x)(prenume $?y)(mama Maria Popescu))
    =>
    (printout t "Maria Popescu este mama: " $?x $?y crlf))
(facts)
(run)

(defrule regula4
    (Persoane(mama $?x){nume == Popescu && prenume == Ciprian})
    =>
    (printout t "Rezultat" $?x crlf))
(facts)
(run)

(defrule frati
    (Persoana(nume $?x)(mama $?y1)(tata $?z1))
    (Persoana(nume $?l)(mama $?y1)(tata $?z1))
    =>
    (if (neq $?x $?l)then(printout t $?x "Este frate/sora cu " $?l crlf))
    )
(facts)
(run)


/*---------------------------------------------------------------*/

(deftemplate Animale (slot tip) (slot gen))
(deffacts ArcaluiNoe 
    (Animale (tip omida) (gen mascul))
	(Animale (tip omida) (gen femela))
	(Animale (tip soarece) (gen mascul))
	(Animale (tip soarece) (gen femela))
	(Animale (tip hamster) (gen mascul))
	(Animale (tip hamster) (gen femela))
	(Animale (tip veverita) (gen mascul))
	(Animale (tip veverita) (gen femela))
	(Animale (tip pisica) (gen mascul))
	(Animale (tip pisica) (gen femela))
	(Animale (tip caine) (gen mascul))
	(Animale (tip caine) (gen femela))
	(Animale (tip leu) (gen mascul))
	(Animale (tip leu) (gen femela))
	(Animale (tip vaca) (gen mascul))
	(Animale (tip vaca) (gen femela))
	(Animale (tip elefant) (gen mascul))
	(Animale (tip elefant) (gen femela))
	(Animale (tip girafa) (gen mascul))
	(Animale (tip girafa) (gen femela)))
    (reset)
(facts)

(defrule cautare_leu
    (Animale (tip leu) (gen $?x))
    =>
    (printout t "S-a gasit leul de tip  " $?x  crlf))
(run)

/*-----------------------------------------------------*/

(defglobal ?*n* = crlf)

(deftemplate Animal (multislot sex)(multislot rasa)(slot inaltime))

(deffacts Arca
    (Animal(sex mascul)(rasa soarece)(inaltime 3))
    (Animal(sex femela)(rasa soarece)(inaltime 2.7))
    (Animal(sex mascul)(rasa veverita)(inaltime 7.5))
    (Animal(sex femela)(rasa veverita)(inaltime 7.3))
    (Animal(sex mascul)(rasa pisica)(inaltime 15))
    (Animal(sex femela)(rasa pisica)(inaltime 12))
    )(reset)

(defrule afisare
        (Animal(rasa $?rasaAimal1)(sex $?sexAnimal1)(inaltime $?inaltimeAnimal1))
        (Animal(rasa $?rasaAimal2)(sex $?sexAnimal2)(inaltime $?inaltimeAnimal2))
	=> 
    (if (<=  $?inaltimeAnimal1  $?inaltimeAnimal2) 
        then 
        	(printout t $?sexAnimal1 $?rasaAimal1 "cu inaltime" $?inaltimeAnimal1 ?*n*)
	)
)
	
    
(facts)(run)

/*-----------------------------*/
soarece, veverita, pisica,caine, vaca, elefant, girafa, rasa, sex, inaltime, feminin, masculin
mouse, squirrel, cat, dog, cow, elephant, giraffe, race, sex, height, feminine, masculine

(deftemplate Animals (multislot race)(multislot sex)(slot height))
(deffacts NoahArk
    (Animals(race mouse)(sex masculine)(height 2))
    (Animals(race mouse)(sex feminine)(height 1))
    (Animals(race squirrel)(sex masculine)(height 15))
    (Animals(race squirrel)(sex feminine)(height 10))
    (Animals(race cat)(sex masculine)(height 30))
    (Animals(race cat)(sex feminine)(height 20))
    (Animals(race dog)(sex masculine)(height 100))
    (Animals(race dog)(sex feminine)(height 90))
    (Animals(race cow)(sex masculine)(height 180))
    (Animals(race cow)(sex feminine)(height 160))
    (Animals(race elephant)(sex masculine)(height 330))
    (Animals(race elephant)(sex feminine)(height 270))
    (Animals(race giraffe)(sex masculine)(height 550))
    (Animals(race giraffe)(sex feminine)(height 480))
    )(reset)

(defrule afisare2
        (Animals(race $?rasaAimal3)(sex $?sexAnimal3)(height $?inaltimeAnimal3))
        (Animal(race $?rasaAimal4)(sex $?sexAnimal4)(height $?inaltimeAnimal4))
	=> 
    (if (<=  $?inaltimeAnimal3  $?inaltimeAnimal4) 
        then 
        	(printout t $?sexAnimal3 $?rasaAimal4 "cu inaltime" $?inaltimeAnimal3 ?*n*)
	)
)
	
    
(facts)(run)

