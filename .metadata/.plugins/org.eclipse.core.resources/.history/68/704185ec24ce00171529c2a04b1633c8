

(deftemplate Persoana (multislot nume)(multislot mama)(multislot tata)(multislot casatorit))
(deffacts Familie
    (Persoana(nume Ion Popescu)(mama Maricica)(tata Maricel)(casatorit Maria Popescu))
    (Persoana(nume Maria Popescu)(mama Marinica)(tata Marinel)(casatorit Ion Popescu))
    (Persoana(nume Cristian Popescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Elena Popescu))
    (Persoana(nume Elena Popescu)(mama Marcela)(tata Marcel)(casatorit Cristian Popescu))
    (Persoana(nume Adrian Popescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Cristina Popescu))
    (Persoana(nume Cristina Popescu)(mama Cristinuta)(tata Cristinel)(casatorit Adrian Popescu))
    (Persoana(nume Tudor Popescu)(mama Cristina Popescu)(tata Adrian Popescu)(casatorit nil))
    (Persoana(nume Ciprian Popescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Adriana Popescu))
    (Persoana(nume Adriana Popescu)(mama Adita)(tata Adi)(casatorit Ciprian Popescu))
    (Persoana(nume Maria Andreescu)(mama Maria Popescu)(tata Ion Popescu)(casatorit Petre Andreescu))
    (Persoana(nume Petre Andreescu)(mama Petrica)(tata Petrel)(casatorit Maria Andreescu))
    (Persoana(nume Ionel Andreescu)(mama Maria Andreescu)(tata Petre Andreescu)(casatorit nil))
    )(reset)
(facts)

(deftemplate Frati (multislot nume)(multislot frate))


(defrule frate
    (Persoana(nume $?x)(mama $?y)(tata $?z))
    (Persoana (nume $?l)(mama $?y)(tata $?z))
    =>
    (if (eq $?x $?l)then 
        ;(printout t "nu are frati")
        else 
		(assert(Frati(nume $?x)(frate $?l)))
))
 
(defrule verisorMama
    (Frati(nume $?a)(frate $?b))
    (Persoana(nume $?x1)(mama $?a)(tata $?z))
    (Persoana(nume $?y1)(mama $?b)(tata $?z1))

     
    =>
    (printout t $?x1 "este verisor cu " $?y1 crlf)
   
 )
(defrule verisorTata
    (Frati(nume $?a)(frate $?b))
    (Persoana(nume $?x1)(mama $?ads)(tata $?a))
    (Persoana(nume $?y1)(mama $?ds)(tata $?b))

     
    =>
    (printout t $?x1 "este verisor cu " $?y1 crlf)
  
 )
 (run)

